//@ sourceMappingURL=ship.map
// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ig.module('game.entities.ship').requires('plugins.steering-behaviors', 'game.entities.explosion').defines(function() {
    return _this.EntityShip = SteeringBehaviorsEntity.extend({
      type: ig.Entity.TYPE.NONE,
      checkAgainst: ig.Entity.TYPE.NONE,
      collides: ig.Entity.COLLIDES.NEVER,
      size: {
        x: 16,
        y: 8
      },
      animSheet: new ig.AnimationSheet('media/destroyer.png', 16, 8),
      markerSheet: new ig.AnimationSheet("media/planet_marker.png", 24, 24),
      zIndex: 2,
      health: 20,
      maxForce: 10,
      maxSpeed: 20,
      init: function(x, y, settings) {
        var _ref;
        this.parent(x, y, settings);
        this.addAnim('idle', 1, [
          (_ref = this.ki) != null ? _ref : {
            1: 0
          }
        ]);
        if (this.ki) {
          this.kiTimer = new ig.Timer(4);
          this.marker = new ig.Animation(this.markerSheet, 1, [0]);
        }
        return ig.game.sortEntitiesDeferred();
      },
      update: function() {
        if (this.ki) {
          this.handleKI();
        }
        if (this.target && this.touches(this.target)) {
          this.target.kill();
          this.target = false;
        }
        if (this.marked() && ig.input.pressed('click')) {
          this.sendFighter();
        }
        this.currentAnim.angle = Math.atan2(this.vel.y, this.vel.x);
        if (this.target) {
          this.vArriveTo.set({
            x: this.target.pos.x + this.target.size.x / 2,
            y: this.target.pos.y + this.target.size.y / 2
          });
        }
        return this.parent();
      },
      sendFighter: function() {
        var fighters, nearestFighter,
          _this = this;
        fighters = ig.game.getEntitiesByType(EntityFighter).filter(function(fighter) {
          return !fighter.ki && (!fighter.target || fighter.target._killed);
        });
        fighters.sort(function(a, b) {
          return _this.distanceTo(a) - _this.distanceTo(b);
        });
        if (nearestFighter = fighters[0]) {
          nearestFighter.target = this;
          return nearestFighter.arriveActive = true;
        }
      },
      handleKI: function() {
        var entities,
          _this = this;
        if (this.kiTimer.delta() > 0) {
          if (!this.target || this.target._killed) {
            entities = ig.game.getEntitiesByType(EntityPlanet).filter(function(planet) {
              return !planet.enemy;
            });
            entities.sort(function(a, b) {
              return _this.distanceTo(a) - _this.distanceTo(b);
            });
            this.target = entities[0];
            this.arriveActive = true;
          }
          return this.kiTimer.reset();
        }
      },
      draw: function() {
        this.parent();
        if (this.marked()) {
          return this.marker.draw(this.pos.x - 4, this.pos.y - 8);
        }
      },
      marked: function() {
        var _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results, _results1;
        return this.ki && (_ref = ig.input.mouse.x.floor(), __indexOf.call((function() {
          _results = [];
          for (var _i = _ref1 = this.pos.x.floor(), _ref2 = (this.pos.x + this.size.x).ceil(); _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; _ref1 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this), _ref) >= 0) && (_ref3 = ig.input.mouse.y.floor(), __indexOf.call((function() {
          _results1 = [];
          for (var _j = _ref4 = this.pos.y.floor(), _ref5 = (this.pos.y + this.size.y).ceil(); _ref4 <= _ref5 ? _j <= _ref5 : _j >= _ref5; _ref4 <= _ref5 ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this), _ref3) >= 0);
      },
      kill: function() {
        if (!this._killed) {
          ig.game.spawnEntity(EntityExplosion, this.pos.x, this.pos.y);
        }
        return this.parent();
      }
    });
  });

}).call(this);
