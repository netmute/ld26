//@ sourceMappingURL=planet.map
// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ig.module('game.entities.planet').requires('impact.entity').defines(function() {
    return _this.EntityPlanet = ig.Entity.extend({
      type: ig.Entity.TYPE.NONE,
      checkAgainst: ig.Entity.TYPE.NONE,
      collides: ig.Entity.COLLIDES.NEVER,
      markerSheet: new ig.AnimationSheet("media/planet_marker.png", 24, 24),
      size: {
        x: 16,
        y: 16
      },
      animSheet: new ig.AnimationSheet('media/planet.png', 16, 16),
      zIndex: 1,
      init: function(settings) {
        var color, half, x, y, _ref;
        half = ig.system.width / 2;
        x = half * Math.random();
        if (settings.enemy) {
          x = x + (half - this.size.x);
        }
        y = (ig.system.height - this.size.y) * Math.random();
        color = (_ref = settings.enemy) != null ? _ref : {
          1: 0
        };
        this.marker = new ig.Animation(this.markerSheet, 1, [0]);
        this.parent(x, y, settings);
        this.addAnim('idle', 1, [color]);
        return this.ship = ig.game.spawnEntity(EntityShip, this.pos.x, this.pos.y + 4, {
          ki: settings.enemy
        });
      },
      update: function() {
        if (this.marked() && ig.input.pressed('click')) {
          this.sendShip();
        }
        return this.parent();
      },
      sendShip: function() {
        var nearestShip, ships,
          _this = this;
        ships = ig.game.getEntitiesByType(EntityShip).filter(function(ship) {
          return !ship.ki && (!ship.target || ship.target._killed);
        });
        ships.sort(function(a, b) {
          return _this.distanceTo(a) - _this.distanceTo(b);
        });
        if (nearestShip = ships[0]) {
          nearestShip.target = this;
          return nearestShip.arriveActive = true;
        }
      },
      draw: function() {
        this.parent();
        if (this.marked()) {
          return this.marker.draw(this.pos.x - 4, this.pos.y - 4);
        }
      },
      marked: function() {
        var _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results, _results1;
        return this.enemy && (_ref = ig.input.mouse.x.floor(), __indexOf.call((function() {
          _results = [];
          for (var _i = _ref1 = this.pos.x.floor(), _ref2 = (this.pos.x + this.size.x).ceil(); _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; _ref1 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this), _ref) >= 0) && (_ref3 = ig.input.mouse.y.floor(), __indexOf.call((function() {
          _results1 = [];
          for (var _j = _ref4 = this.pos.y.floor(), _ref5 = (this.pos.y + this.size.y).ceil(); _ref4 <= _ref5 ? _j <= _ref5 : _j >= _ref5; _ref4 <= _ref5 ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this), _ref3) >= 0);
      },
      kill: function() {
        this.ship.kill();
        return this.parent();
      }
    });
  });

}).call(this);
