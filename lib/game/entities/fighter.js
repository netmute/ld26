//@ sourceMappingURL=fighter.map
// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  ig.module('game.entities.fighter').requires('plugins.steering-behaviors').defines(function() {
    return _this.EntityFighter = SteeringBehaviorsEntity.extend({
      type: ig.Entity.TYPE.NONE,
      checkAgainst: ig.Entity.TYPE.NONE,
      collides: ig.Entity.COLLIDES.NEVER,
      size: {
        x: 6,
        y: 6
      },
      animSheet: new ig.AnimationSheet('media/fighter.png', 6, 6),
      zIndex: 3,
      maxForce: 30,
      maxSpeed: 50,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        this.addAnim('idle', 1, [0]);
        if (this.ki) {
          this.kiTimer = new ig.Timer(1);
        }
        this.shootTimer = new ig.Timer(1);
        return ig.game.sortEntitiesDeferred();
      },
      update: function() {
        if (this.ki) {
          this.handleKI();
        }
        this.currentAnim.angle = Math.atan2(this.vel.y, this.vel.x);
        if (this.target) {
          this.vArriveTo.set({
            x: this.target.pos.x + this.target.size.x / 2,
            y: this.target.pos.y + this.target.size.y / 2
          });
        }
        return this.parent();
      },
      draw: function() {
        this.parent();
        if (this.target && !this.target._killed && this.distanceTo(this.target) < 40) {
          return this.shoot();
        }
      },
      shoot: function() {
        if (this.shootTimer.delta() > 0) {
          ig.system.context.strokeStyle = "#0f0";
          ig.system.context.lineWidth = 1.0;
          ig.system.context.beginPath();
          ig.system.context.moveTo(ig.system.getDrawPos(this.vEntityCenter.x - ig.game.screen.x), ig.system.getDrawPos(this.vEntityCenter.y - ig.game.screen.y));
          ig.system.context.lineTo(ig.system.getDrawPos(this.target.vEntityCenter.x - ig.game.screen.x), ig.system.getDrawPos(this.target.vEntityCenter.y - ig.game.screen.y));
          ig.system.context.stroke();
          ig.system.context.closePath();
        }
        if (this.shootTimer.delta() > 0.2) {
          this.target.receiveDamage(1);
          return this.shootTimer.reset();
        }
      },
      handleKI: function() {
        var entities,
          _this = this;
        if (this.kiTimer.delta() > 0) {
          if (!this.target || this.target._killed) {
            entities = ig.game.getEntitiesByType(EntityShip).filter(function(ship) {
              return !ship.ki;
            });
            entities.sort(function(a, b) {
              return _this.distanceTo(a) - _this.distanceTo(b);
            });
            this.target = entities[0];
            this.arriveActive = true;
          }
          return this.kiTimer.reset();
        }
      }
    });
  });

}).call(this);
