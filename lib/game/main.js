//@ sourceMappingURL=main.map
// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  ig.module('game.main').requires('impact.game', 'game.entities.planet', 'game.entities.star', 'game.entities.play', 'game.entities.tutorial', 'impact.debug.debug').defines(function() {
    _this.MyGame = ig.Game.extend({
      playerFont: new ig.Font("media/player_font.png"),
      enemyFont: new ig.Font("media/enemy_font.png"),
      laserSound: new ig.Sound("media/laser.ogg", false),
      explosionSound: new ig.Sound("media/explosion.ogg", false),
      confirmSound: new ig.Sound("media/confirm.ogg"),
      planets: [],
      init: function() {
        var num, _i, _j, _k, _l, _m;
        ig.input.bind(ig.KEY.MOUSE1, 'click');
        for (num = _i = 1; _i <= 150; num = ++_i) {
          this.spawnEntity(EntityStar);
        }
        for (num = _j = 1; _j <= 3; num = ++_j) {
          this.spawnEntity(EntityPlanet, {
            enemy: false,
            ship: "destroyer"
          });
        }
        for (num = _k = 1; _k <= 3; num = ++_k) {
          this.spawnEntity(EntityPlanet, {
            enemy: false,
            ship: "fighter"
          });
        }
        for (num = _l = 1; _l <= 3; num = ++_l) {
          this.spawnEntity(EntityPlanet, {
            enemy: true,
            ship: "destroyer"
          });
        }
        for (num = _m = 1; _m <= 3; num = ++_m) {
          this.spawnEntity(EntityPlanet, {
            enemy: true,
            ship: "fighter"
          });
        }
        this.laserSound.volume = .3;
        this.explosionSound.volume = .5;
        return this.confirmSound.volume = .2;
      },
      update: function() {
        return this.parent();
      },
      draw: function() {
        var enemyPlanets, enemyShips, playerPlanets, playerShips;
        this.parent();
        playerPlanets = this.getEntitiesByType(EntityPlanet).filter(function(planet) {
          return !planet.enemy;
        });
        playerShips = this.getEntitiesByType(EntityShip).filter(function(ship) {
          return !ship.ki;
        });
        enemyPlanets = this.getEntitiesByType(EntityPlanet).filter(function(planet) {
          return planet.enemy;
        });
        enemyShips = this.getEntitiesByType(EntityShip).filter(function(ship) {
          return ship.ki;
        });
        this.playerFont.draw(playerPlanets.length, 2, 2, ig.Font.ALIGN.LEFT);
        this.enemyFont.draw(enemyPlanets.length, ig.system.width - 2, 2, ig.Font.ALIGN.RIGHT);
        if (playerPlanets.length === 0) {
          this.write("You've been annihilated.", this.enemyFont);
        }
        if (enemyPlanets.length === 0) {
          this.write("You've won the war!", this.playerFont);
        }
        if (playerShips.length === 0 && enemyShips.length === 0) {
          if (playerPlanets.length > enemyPlanets.length) {
            this.write("You've won the war!", this.playerFont);
          }
          if (playerPlanets.length < enemyPlanets.length) {
            this.write("You've lost the war.", this.enemyFont);
          }
          if (playerPlanets.length === enemyPlanets.length) {
            return this.write("The war is over. Tie.", this.playerFont);
          }
        }
      },
      write: function(text, font) {
        font.draw(text, ig.system.width / 2, ig.system.height / 2 - font.height, ig.Font.ALIGN.CENTER);
        font.draw("Click to play again.", ig.system.width / 2, ig.system.height / 2, ig.Font.ALIGN.CENTER);
        if (ig.input.pressed('click')) {
          return ig.system.setGame(MyGame);
        }
      }
    });
    _this.Tutorial = ig.Game.extend({
      font: new ig.Font("media/player_font.png"),
      planet: new ig.Image("media/planet.png"),
      battleship: new ig.Image("media/destroyer.png"),
      fighter: new ig.Image("media/fighter.png"),
      init: function() {
        var num, _i;
        ig.input.bind(ig.KEY.MOUSE1, 'click');
        for (num = _i = 1; _i <= 150; num = ++_i) {
          this.spawnEntity(EntityStar);
        }
        return this.tutorialSection = 1;
      },
      draw: function() {
        this.parent();
        if (this.tutorialSection === 1) {
          this.renderFirstSection();
        }
        if (this.tutorialSection === 2) {
          this.renderSecondSection();
        }
        if (this.tutorialSection === 3) {
          this.renderThirdSection();
        }
        if (this.tutorialSection === 4) {
          this.renderFourthSection();
        }
        if (this.tutorialSection === 5) {
          ig.system.setGame(Menu);
        }
        this.font.draw("Click to continue", ig.system.width / 2, ig.system.height - (6 + this.font.height), ig.Font.ALIGN.CENTER);
        if (ig.input.pressed("click")) {
          return this.tutorialSection++;
        }
      },
      renderFirstSection: function() {
        this.font.draw("Units in the game", ig.system.width / 2, 6, ig.Font.ALIGN.CENTER);
        this.font.draw("Planet", 30, 45, ig.Font.ALIGN.LEFT);
        this.planet.drawTile(60, 45 + 28, 0, 16);
        this.font.draw("Don't let the enemy\ndestroy them", 110, 45 + 22, ig.Font.ALIGN.LEFT);
        this.font.draw("Battleship", 30, 115, ig.Font.ALIGN.LEFT);
        this.battleship.drawTile(60, 115 + 32, 0, 16, 8);
        this.font.draw("Attacks and destroys\nplanets", 110, 115 + 22, ig.Font.ALIGN.LEFT);
        this.font.draw("Fighter", 30, 185, ig.Font.ALIGN.LEFT);
        this.fighter.drawTile(63, 185 + 35, 0, 6);
        return this.font.draw("Attacks and destroys\nBattleships", 110, 185 + 22, ig.Font.ALIGN.LEFT);
      },
      renderSecondSection: function() {
        this.font.draw("Gameplay", ig.system.width / 2, 6, ig.Font.ALIGN.CENTER);
        this.font.draw("Each side has 6 planets.", ig.system.width / 2, 6 + 2 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("3 Planets with Battleships,", ig.system.width / 2, 6 + 4 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("and 3 Planets with Fighters.", ig.system.width / 2, 6 + 5 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("If a ships planet is destroyed,", ig.system.width / 2, 6 + 7 * this.font.height, ig.Font.ALIGN.CENTER);
        return this.font.draw("the ship will also be destroyed.", ig.system.width / 2, 6 + 8 * this.font.height, ig.Font.ALIGN.CENTER);
      },
      renderThirdSection: function() {
        this.font.draw("Controls", ig.system.width / 2, 6, ig.Font.ALIGN.CENTER);
        this.font.draw("You only have indirect control.", ig.system.width / 2, 6 + 2 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("Click on enemy planet:", ig.system.width / 2, 6 + 3 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("Nearest free Battleship attacks.", ig.system.width / 2, 6 + 4 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("Click on enemy Battleship:", ig.system.width / 2, 6 + 5 * this.font.height, ig.Font.ALIGN.CENTER);
        this.font.draw("Nearest free Fighter attacks.", ig.system.width / 2, 6 + 6 * this.font.height, ig.Font.ALIGN.CENTER);
        return this.font.draw("Once a ship has orders, the\n orders can't be changed until\n the ships target is destroyed.", ig.system.width / 2, 6 + 8 * this.font.height, ig.Font.ALIGN.CENTER);
      },
      renderFourthSection: function() {
        this.font.draw("Goal", ig.system.width / 2, 6, ig.Font.ALIGN.CENTER);
        this.font.draw("The game ends if all Battleships\n are destroyed, or if one side\n has no planets left.", ig.system.width / 2, 6 + 2 * this.font.height, ig.Font.ALIGN.CENTER);
        return this.font.draw("The side with the most planets\n left wins the game.", ig.system.width / 2, 6 + 6 * this.font.height, ig.Font.ALIGN.CENTER);
      }
    });
    _this.Menu = ig.Game.extend({
      title: new ig.Image("media/title.png"),
      init: function() {
        var num, _i;
        ig.music.add("media/music.ogg");
        ig.music.play();
        ig.input.bind(ig.KEY.MOUSE1, 'click');
        for (num = _i = 1; _i <= 150; num = ++_i) {
          this.spawnEntity(EntityStar);
        }
        this.spawnEntity(EntityTutorial, ig.system.width / 2, ig.system.height - 95);
        return this.spawnEntity(EntityPlay, ig.system.width / 2, ig.system.height - 70);
      },
      draw: function() {
        this.parent();
        return this.title.draw(0, 50);
      }
    });
    return ig.main('#canvas', Menu, 60, 400, 300, 2);
  });

}).call(this);
